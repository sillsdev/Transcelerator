<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_version)' == ''">$(MSBuildProjectDirectory)\..</RootDir>
		<RootDir Condition="'$(teamcity_version)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0.0.0.0</BUILD_NUMBER>
		<PackagesDir>$(RootDir)/packages</PackagesDir>
		<NunitConsoleRunnerDir>$(PackagesDir)/NUnit.ConsoleRunner/tools</NunitConsoleRunnerDir>
		<BuildTasksDll>$(PackagesDir)/SIL.BuildTasks/tools/SIL.BuildTasks.dll</BuildTasksDll>
		<Solution>Transcelerator.sln</Solution>
		<ApplicationName>Transcelerator</ApplicationName>
		<Configuration>Release</Configuration>
		<TeamCity Condition="'$(teamcity_version)' != ''">true</TeamCity>
		<TeamCity Condition="'$(teamcity_version)' == ''">false</TeamCity>
		<ReleaseNotesSuffix Condition="'$(Platform)' == 'x86'">(32-bit)</ReleaseNotesSuffix>
		<TestOutputXmlFile Condition="'$(teamcity_version)' == ''">$(RootDir)/output/$(Configuration)/TestResults.xml</TestOutputXmlFile>
		<ExtraExcludeCategories Condition="'$(teamcity_version)' != ''">SkipOnTeamCity,</ExtraExcludeCategories>
		<RestartBuild Condition="!Exists('$(BuildTasksDll)') Or !Exists('$(NunitConsoleRunnerDir)/nunit3-console.exe') Or !Exists('$(RootDir)/NUnit.Extension.NUnitProjectLoader/tools/nunit-project-loader.dll') Or !Exists('$(RootDir)/NUnit.Extension.TeamCityEventListener/tools/teamcity-event-listener.dll')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(BuildTasksDll)') And Exists('$(NunitConsoleRunnerDir)/nunit3-console.exe') And Exists('$(RootDir)/NUnit.Extension.NUnitProjectLoader/tools/nunit-project-loader.dll') And Exists('$(RootDir)/NUnit.Extension.TeamCityEventListener/tools/teamcity-event-listener.dll')">false</RestartBuild>
	</PropertyGroup>

	<UsingTask TaskName="StampAssemblies" AssemblyFile="$(BuildTasksDll)"
		Condition="Exists('$(BuildTasksDll)')" />
	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(BuildTasksDll)"
		Condition="Exists('$(BuildTasksDll)')" />
	<UsingTask TaskName="Split" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
	<UsingTask TaskName="NUnit3" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  
	<Target Name="VersionNumbers">
		<Message Text="BuildTasksDll: $(BuildTasksDll)"/>
		<Message Text="BUILD_NUMBER: $(BUILD_NUMBER)" Importance="high"/>

		<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="2">
			<Output TaskParameter="ReturnValue" PropertyName="BuildCounter" />
		</Split>
		<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="3">
			<Output TaskParameter="ReturnValue" PropertyName="BuildHash" />
		</Split>

		<Message Text="BuildCounter: $(BuildCounter)" Importance="high"/>
		<Message Text="BuildHash: $(BuildHash)" Importance="high"/>

		<!-- Mimicking Bloom's strategy of updating the version number here (not on TeamCity, not in the assemblies). -->
		<CreateProperty Value="3.1.$(BuildCounter)">
			<Output PropertyName="Version" TaskParameter="Value"/>
		</CreateProperty>
		<CreateProperty Value="$(Version).$(BuildHash)">
			<Output PropertyName="FullVersion" TaskParameter="Value"/>
		</CreateProperty>
		<CreateProperty Value="TransceleratorInstaller.$(Version).msi" Condition=" '$(Label)' == '' ">
			<Output PropertyName="InstallerFileName" TaskParameter="Value"/>
		</CreateProperty>
		<CreateProperty Value="TransceleratorInstaller.$(Version).$(Label).msi" Condition=" '$(Label)' != '' ">
			<Output PropertyName="InstallerFileName" TaskParameter="Value"/>
		</CreateProperty>
		<CreateProperty Value="transceleratorinstaller_$(Version)_windows.download_info">
			<Output PropertyName="DownloadInfoFileName" TaskParameter="Value"/>
		</CreateProperty>
		<Message Text="Version: $(Version)" Importance="high"/>
		<Message Text="FullVersion: $(FullVersion)" Importance="high"/>
	</Target>
	
	<Import Project="../.nuget/NuGet.targets" />

	<ItemGroup>
		<PackageDirs Include="$([System.IO.Directory]::GetDirectories(`$(PackagesDir)/`, `NUnit.Console*`, SearchOption.TopDirectoryOnly))" Condition="Exists('$(PackagesDir)/')" />
		<PackageDirs Include="$([System.IO.Directory]::GetDirectories(`$(PackagesDir)/`, `NUnit.Extension.*`, SearchOption.TopDirectoryOnly))" Condition="Exists('$(PackagesDir)/')" />
	</ItemGroup>

	<ItemGroup>
		<_ExcludeEnDir Include="$(RootDir)/Docs/Help Topics/en" />
		<LocalizedHelpTopicDirs Include="$([System.IO.Directory]::GetDirectories(`$(RootDir)/Docs/Help Topics/`))"
			Exclude="@(_ExcludeEnDir)">
			<FolderName>$([System.IO.Path]::GetFileName(`%(Identity)`))</FolderName>
		</LocalizedHelpTopicDirs>
	</ItemGroup>

	<ItemGroup>
		<!-- Note that for locales that have both a Palaso and a Transcelerator	file, this will
			 include both, which will result in generating the wxs file for that locale twice.
			 While this is harmless, it takes extra time and might produce some confusion
			 when looking at the log file. So we exclude any locales like this. We could
			 probably safely include only the Palaso files and get the same effect, but some
			 day it's possible there could be a locale that has Transcelerator localizations
			 but no Palaso localizations. -->
		<_ExcludeDupLocales Include="$(RootDir)/DistFiles/localization/Transcelerator.es.xlf" />
		<_ExcludeDupLocales Include="$(RootDir)/DistFiles/localization/Transcelerator.fr.xlf" />
		<LocalizedUiStringLocales Include="$([System.IO.Directory]::GetFiles(`$(RootDir)/DistFiles/localization/`))"
			Exclude="@(_ExcludeDupLocales)">
			<WixIdLocale>$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.Path]::GetFileName(`%(Identity)`)),
				`.+[^.]+\.([^.-]+)-?([^.-]*)\.xlf`, `$1$2`))</WixIdLocale>
			<FilenameLocale>$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.Path]::GetFileName(`%(Identity)`)),
				`.+[^.]+\.([^.]+)\.xlf`, `$1`))</FilenameLocale>
		</LocalizedUiStringLocales>
	</ItemGroup>

	<ItemGroup>
		<LocalizedPhrasesFiles Include="$([System.IO.Directory]::GetFiles(`$(RootDir)/Transcelerator/`,
			`LocalizedPhrases-*.xlf`))">
			<WixIdLocale>$([System.Text.RegularExpressions.Regex]::Replace(`%(Identity)`,
				`.+LocalizedPhrases-([^.-]+)-?([^.-]*)\.xlf$`, `$1$2`))</WixIdLocale>
			<FilenameLocale>$([System.Text.RegularExpressions.Regex]::Replace(`%(Identity)`,
				`.+LocalizedPhrases-([^.]+)\.xlf$`, `$1`))</FilenameLocale>
		</LocalizedPhrasesFiles>
	</ItemGroup>
	
	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites">
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<Message Text="Configuration=$(Configuration)"/>
		<!-- first remove any existing packages - if they were installed with appended version numbers nuget refuses to install it again, messing up things -->
		<RemoveDir Directories="@(PackageDirs)" />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Exec Command='$(NuGetCommand) install NUnit.ConsoleRunner -excludeVersion -version 3.15.2 -solutionDirectory "$(RootDir)"' />
		<!-- The two extensions are required to show the tests on TC -->
		<Exec Command='$(NuGetCommand) install NUnit.Extension.NUnitProjectLoader -excludeVersion -version 3.6.0 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install NUnit.Extension.TeamCityEventListener -excludeVersion -version 1.0.7 -solutionDirectory "$(RootDir)"' />

		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
		  Properties="Configuration=$(Configuration)" Condition="$(RestartBuild)" />
    </Target>

	<Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
		<ItemGroup>
			<AssemblyInfoFiles Include="$(RootDir)/**/AssemblyInfo.cs"/>
		</ItemGroup>
		<StampAssemblies Version="$(Version)" InputAssemblyPaths="@(AssemblyInfoFiles)" />
	</Target>
	
	<Target Name="Build">
		<CallTarget Targets="RestoreBuildTasks"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
	</Target>

	<ItemGroup>
		<Configurations Include="Debug;Release"/>
	</ItemGroup>

	<Target Name="BuildInternal" DependsOnTargets="SetAssemblyVersion">
		<MSBuild Projects="$(RootDir)/$(Solution)"
			 Targets="Rebuild"
			 Properties="Configuration=%(Configurations.Identity)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build; SetTestAssemblies">
		<Message Text="Running NUnit 3 from $(RootDir)/packages/NUnit.ConsoleRunner.3.15.2/tools"/>
		<NUnit3
			Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			ExcludeCategory="$(ExtraExcludeCategories)$(excludedCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Force32Bit="false"
			Verbose="true"
			TeamCity="$(TeamCity)"/>
	</Target>

	<Target Name="SetTestAssemblies">
		<CreateItem Include="$(RootDir)/output/$(Configuration)/*Tests.dll">
			<Output ItemName="TestAssemblies" TaskParameter="Include" />
		</CreateItem>
	</Target>

	<Target Name="Installer" DependsOnTargets="VersionNumbers;Build;MakeWixForHtmlDocFiles;MakeWixForLocalizedUiStrings;MakeWixForLocalizedPhrases">

		<!-- set the version number in the installer configuration program.	Perhaps there's a way to just send in the variables rather than this brute-force
			changing of the script, but I haven't figured that out. -->

		<FileUpdate File="$(RootDir)\Installer\Installer.wxs" Regex='Property_ProductVersion = ".*"'
			ReplacementText ="Property_ProductVersion = &quot;$(Version)&quot;" />

		<Message Text="Making Installer Version: $(Version)" Importance="high" />

		<MSBuild Projects="$(RootDir)\Installer\Installer.wixproj"/>

		<!-- remove an existing one with the same name, if necessary -->
		<Delete Files="$(RootDir)\output\installer\$(InstallerFileName)" TreatErrorsAsWarnings="false" />

		<Copy SourceFiles="$(RootDir)\output\installer\TransceleratorInstaller.msi"
			DestinationFiles="$(RootDir)\output\installer\$(InstallerFileName)"
		/>
		<Message Text="Copied installer to $(RootDir)\output\installer\$(InstallerFileName)" Importance="high"/>

		<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
		<Delete Files="$(RootDir)\output\installer\TransceleratorInstaller.msi" TreatErrorsAsWarnings="false" />

		<!-- copy it so we aren't modifying the original, which then is a pain on dev machines -->
		<Copy SourceFiles ="$(RootDir)\installer\template.download_info"
			DestinationFiles ="$(RootDir)\output\installer\$(DownloadInfoFileName)"/>

		<FileUpdate File="$(RootDir)\output\installer\$(DownloadInfoFileName)"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(Version)" />
			
		<Copy SourceFiles ="$(RootDir)\DistFiles\template.releasenotes.download_info"
			DestinationFiles ="$(RootDir)\output\releasenotes$(ReleaseNotesSuffix).download_info"/>

		<FileUpdate File="$(RootDir)\output\releasenotes$(ReleaseNotesSuffix).download_info"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(Version)" />
		
		<!-- For the 32-bit version only, also make a copy of the release notes named
			 so that it will not overwrite the 64-bit version when copied to the 
			 download server. -->
		<Copy SourceFiles ="$(RootDir)\DistFiles\ReleaseNotes.md"
			DestinationFiles ="$(RootDir)\output\ReleaseNotes $(ReleaseNotesSuffix).md"
			Condition="'$(Platform)' == 'x86'"/>
	</Target>

	<!-- These targets are designed to be additional steps on TeamCity after running target Installer. Pick the appropriate one
	depending on whether your project's output MUST be signed or it's only nice if it is. For example, a continuous build
	might use SignIfPossible, while a Publication build must use SignInstaller.-->
	<Target Name="SignInstaller" DependsOnTargets="VersionNumbers; Installer">
		<Exec Command='sign "$(RootDir)\output\installer\$(InstallerFileName)"'></Exec>
		<Message Text="Signed installer at $(RootDir)\output\installer\$(InstallerFileName)" Importance="high"/>
	</Target>

	<Target Name="SignIfPossible" DependsOnTargets="VersionNumbers">
		<Exec Command='sign "$(RootDir)\output\installer\$(InstallerFileName)"' ContinueOnError="true"></Exec>
	</Target>
	
	<Target Name="MakeWixForHtmlDocFiles" DependsOnTargets="MakeWixForLocalizedHtmlDocFiles">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>
		<MakeWixForDirTree
			DirectoryReferenceId="DocsDirP9Beta"
			ComponentGroupId="COMPONENTSFORP9BetaDocumentation_en"
			RootDirectory="$(RootDir)\Docs\Help Topics"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedDocFilesP9Beta.wxs"
			IgnoreRegExPattern="\\e[^n]\\"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
		<MakeWixForDirTree
			DirectoryReferenceId="DocsDirP9"
			ComponentGroupId="COMPONENTSFORP9Documentation_en"
			RootDirectory="$(RootDir)\Docs\Help Topics"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedDocFilesP9.wxs"
			IgnoreRegExPattern="\\e[^n]\\"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>
	
	<Target Name="MakeWixForLocalizedHtmlDocFiles" Outputs="%(LocalizedHelpTopicDirs.Identity)">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>
		<Message Text="Generating $(RootDir)\output\installer\GeneratedDocFilesP9_%(LocalizedHelpTopicDirs.FolderName).wxs" />
		<MakeWixForDirTree
			DirectoryReferenceId="DocsDirP9_%(LocalizedHelpTopicDirs.FolderName)"
			ComponentGroupId="COMPONENTSFORP9Documentation_%(LocalizedHelpTopicDirs.FolderName)"
			RootDirectory="%(LocalizedHelpTopicDirs.Identity)"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedDocFilesP9_%(LocalizedHelpTopicDirs.FolderName).wxs"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>
	
	<Target Name="MakeWixForLocalizedUiStrings" Outputs="%(LocalizedUiStringLocales.Identity)">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>
		<Message Text="Generating $(RootDir)\output\installer\GeneratedUiStringsFilesP9_%(LocalizedUiStringLocales.FilenameLocale).wxs" />
		<MakeWixForDirTree
			DirectoryReferenceId="INSTALLDIR9_LOCALIZATION"
			ComponentGroupId="COMPONENTSFORP9PLUGINLOCALIZATION_%(LocalizedUiStringLocales.WixIdLocale)"
			RootDirectory="$(RootDir)\DistFiles\localization"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedUiStringsFilesP9_%(LocalizedUiStringLocales.FilenameLocale).wxs"
			MatchRegExPattern="\.%(LocalizedUiStringLocales.FilenameLocale)\.xlf"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>
	
	<Target Name="MakeWixForLocalizedPhrases" Outputs="%(LocalizedPhrasesFiles.Identity)">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>		
		<Message Text="Generating $(RootDir)\output\installer\GeneratedLocalizedPhrasesFilesP9_%(LocalizedPhrasesFiles.FilenameLocale).wxs" />
		<MakeWixForDirTree
			DirectoryReferenceId="INSTALLDIR9"
			ComponentGroupId="COMPONENTSFORP9PLUGIN_%(LocalizedPhrasesFiles.WixIdLocale)"
			RootDirectory="$(RootDir)\Transcelerator\bin\x64\Release"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedLocalizedPhrasesFilesP9_%(LocalizedPhrasesFiles.FilenameLocale).wxs"
			MatchRegExPattern="LocalizedPhrases-%(LocalizedPhrasesFiles.FilenameLocale)\.xlf"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>
	
</Project>
